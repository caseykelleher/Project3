{"version":3,"sources":["Stores/UserStore.js","components/InputField.js","components/SubmitButton.js","LoginForm.js","components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","Titles","Form","onSubmit","getWeather","name","Weather","city","country","temperature","humidity","description","error","API_KEY","App","undefined","a","preventDefault","elements","api_call","data","main","temp","sys","weather","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wRAce,MAXX,aAAe,oBACXA,YAAiBC,KAAM,CAEnBC,SAAS,EACTC,YAAY,EACZC,SAAU,M,QCYPC,E,iLAhBD,IAAD,OACL,OACI,yBAAKC,UAAU,cAEX,2BACIA,UAAU,QACVC,KAAMN,KAAKO,MAAMD,KACjBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAW,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,e,GAX1CI,IAAMC,WCkBhBC,E,iLAhBD,IAAD,OACL,OACI,yBAAKV,UAAU,gBAEX,4BACIA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAU,kBAAM,EAAKV,MAAMU,YAE1BjB,KAAKO,MAAMW,W,GAXLL,IAAMC,WC+GlBK,E,YAzGX,WAAYZ,GAAQ,IAAD,8BACf,4CAAMA,KACDa,MAAQ,CACTjB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,GALL,E,2EASLC,EAAUC,IACpBA,EAAMA,EAAIC,QACFC,OAAQ,IAGhB1B,KAAK2B,SAAL,eACKJ,EAAWC,M,kCAKhBxB,KAAK2B,SAAS,CACVxB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,M,qJAMftB,KAAKoB,MAAMjB,S,oDAGXH,KAAKoB,MAAMC,S,wDAIhBrB,KAAK2B,SAAS,CACVL,gBAAgB,I,kBAKAM,MAAM,SAAU,CAC5BC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB9B,SAAUH,KAAKoB,MAAMjB,SACrBkB,SAAUrB,KAAKoB,MAAMC,a,cARzBa,E,iBAaeA,EAAIC,O,SAAnBC,E,SACUA,EAAOC,SACjBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,UAGvBiC,IAA6B,IAAnBA,EAAOC,UACtBrC,KAAKuC,YACLC,MAAMJ,EAAOK,M,kDAOjBC,QAAQC,IAAR,MACA3C,KAAKuC,Y,+IAIH,IAAD,OACL,OACI,yBAAKlC,UAAU,aAAf,SAGI,kBAAC,EAAD,CACIC,KAAK,OACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMjB,SAAWH,KAAKoB,MAAMjB,SAAW,GACnDO,SAAW,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAIvD,kBAAC,EAAD,CACIlB,KAAK,WACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMC,SAAWrB,KAAKoB,MAAMC,SAAW,GACnDX,SAAW,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGvD,kBAAC,EAAD,CACIN,KAAK,QACLF,SAAUhB,KAAKoB,MAAME,eACrBL,QAAU,kBAAM,EAAK4B,kB,GApGjBhC,IAAMC,WCGfgC,EAPA,kBACd,6BACC,wBAAIzC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,kDCKa0C,EARF,SAAAxC,GAAK,OACjB,0BAAMyC,SAAUzC,EAAM0C,YACrB,2BAAO3C,KAAK,OAAO4C,KAAK,OAAO1C,YAAY,YAC3C,2BAAOF,KAAK,OAAO4C,KAAK,UAAU1C,YAAY,eAC9C,iDCwBa2C,EA5BC,SAAA5C,GAAK,OACpB,yBAAKF,UAAU,iBAEbE,EAAM6C,MAAQ7C,EAAM8C,SAAW,uBAAGhD,UAAU,gBAAb,aAC9B,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAM6C,KAA1C,KAAoD7C,EAAM8C,UAI3D9C,EAAM+C,aAAe,uBAAGjD,UAAU,gBAAb,gBACpB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAM+C,YAA1C,MAID/C,EAAMgD,UAAY,uBAAGlD,UAAU,gBAAb,aACjB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMgD,SAA1C,MAIDhD,EAAMiD,aAAe,uBAAGnD,UAAU,gBAAb,eACpB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMiD,YAA1C,MAIDjD,EAAMkD,OAAS,uBAAGpD,UAAU,kBAAmBE,EAAMkD,SCZlDC,EAAU,mCAEVC,E,2MA8DJvC,MAAQ,CACNkC,iBAAaM,EACbR,UAAMQ,EACNP,aAASO,EACTL,cAAUK,EACVJ,iBAAaI,EACbH,WAAOG,G,EAETX,W,uCAAa,WAAOtC,GAAP,qBAAAkD,EAAA,6DACXlD,EAAEmD,iBACIV,EAAOzC,EAAEC,OAAOmD,SAASX,KAAK3C,MAC9B4C,EAAU1C,EAAEC,OAAOmD,SAASV,QAAQ5C,MAH/B,SAIYmB,MAAM,oDAAD,OAAqDwB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,oBAJjB,cAILM,EAJK,gBAKQA,EAAS7B,OALjB,OAKL8B,EALK,OAMPb,GAAQC,EACV,EAAK1B,SAAS,CACZ2B,YAAaW,EAAKC,KAAKC,KACvBf,KAAMa,EAAKf,KACXG,QAASY,EAAKG,IAAIf,QAClBE,SAAUU,EAAKC,KAAKX,SACpBC,YAAaS,EAAKI,QAAQ,GAAGb,YAC7BC,MAAO,KAGT,EAAK9B,SAAS,CACZ2B,iBAAaM,EACbR,UAAMQ,EACNP,aAASO,EACTL,cAAUK,EACVJ,iBAAaI,EACbH,MAAO,6BAtBA,4C,oRAhEa7B,MAAM,cAAe,CACjCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJlBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACnBC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,WAI5BmC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,G,kDAO3BoC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,E,4RAQP0B,MAAM,UAAW,CAC7BC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJlBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,UACnBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAW,I,kDAMzBuC,QAAQC,IAAR,M,+IAsCI,IAAD,OAEL,OAAIL,EAAUrC,QAEV,yBAAKI,UAAU,OACX,yBAAKA,UAAU,aAAf,2BASFiC,EAAUpC,WAEV,yBAAKG,UAAU,OACX,yBAAKA,UAAU,aAAf,WACaiC,EAAUnC,SAEnB,kBAAC,EAAD,CACEe,KAAM,UACNF,UAAU,EACVC,QAAU,kBAAM,EAAKqD,gBAWrC,6BACE,kBAAC,EAAD,MAEA,yBAAKjE,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,4BACT,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAM4C,WAAYjD,KAAKiD,aACvB,kBAAC,EAAD,CACEK,YAAatD,KAAKoB,MAAMkC,YACxBC,SAAUvD,KAAKoB,MAAMmC,SACrBH,KAAMpD,KAAKoB,MAAMgC,KACjBC,QAASrD,KAAKoB,MAAMiC,QACpBG,YAAaxD,KAAKoB,MAAMoC,YACxBC,MAAOzD,KAAKoB,MAAMqC,gB,GAlJpB5C,IAAMC,WA4JTyD,cAASZ,GC/JJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLf,QAAQe,MAAMA,EAAM+B,c","file":"static/js/main.883cce52.chunk.js","sourcesContent":["import { extendObservable} from 'mobx';\n\nclass UserStore {\n    constructor() {\n        extendObservable(this, {\n            \n            loading: true,\n            isLoggedIn: false,\n            username: ''\n\n        })\n    }\n}\n\nexport default new UserStore();","import React from 'react';\n\nclass InputField extends React.Component {\n\n    render() {\n        return(\n            <div className=\"inputField\">\n\n                <input\n                    className='input'\n                    type={this.props.type}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    onChange={ (e) => this.props.onChange(e.target.value) } \n                    />\n            </div>\n        );\n    }\n}\n\nexport default InputField;","import React from 'react';\n\nclass SubmitButton extends React.Component {\n\n    render() {\n        return(\n            <div className=\"submitButton\">\n\n                <button\n                    className='btn'\n                    disabled={this.props.disabled}\n                    onClick={ () => this.props.onClick() }\n                >\n                    {this.props.text}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default SubmitButton;","import React from 'react';\nimport InputField from './components/InputField';\nimport SubmitButton from './components/SubmitButton';\nimport UserStore from './Stores/UserStore';\n\n\nclass LoginForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val) {\n        val = val.trim();\n        if (val.length >12) {\n            return;\n        }\n        this.setState ({\n            [property]: val\n        })\n    }\n\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: false\n        })\n    }\n\n    async doLogin() {\n\n        if (!this.state.username) {\n            return;\n        }\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            var res = await fetch('/login', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n\n            });\n\n            var result = await res.json();\n            if (result && result.success) {\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            }\n\n            else if (result && result.success === false) {\n                this.resetForm();\n                alert(result.msg);\n            }\n\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"loginForm\">\n                \n                Log in\n                <InputField\n                    type='text'\n                    placeholder='Username'\n                    value={this.state.username ? this.state.username : ''}\n                    onChange={ (val) => this.setInputValue('username', val) }\n                />\n\n\n                <InputField\n                    type='password'\n                    placeholder='Password'\n                    value={this.state.password ? this.state.password : ''}\n                    onChange={ (val) => this.setInputValue('password', val) }\n                />\n\n                <SubmitButton\n                    text='Login'\n                    disabled={this.state.buttonDisabled}\n                    onClick={ () => this.doLogin() }\n                />\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;","import React from \"react\";\n\nconst Titles = () => (\n\t<div>\n\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\n\t\t<h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n\t</div>\n);\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit={props.getWeather}>\n\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n\t\t<button>Get Weather</button>\n\t</form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n\t<div className=\"weather__info\">\n\t {\t\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \n\t \t\t<span className=\"weather__value\"> { props.description } </span>\n\t </p> \n\t }\n\t { \n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \n\t }\n\t</div>\n);\n\nexport default Weather;","import React        from \"react\";\nimport { observer } from 'mobx-react';\nimport UserStore    from './Stores/UserStore';\nimport LoginForm    from './LoginForm';\nimport SubmitButton from './components/SubmitButton';\nimport                   './App.css';\nimport Titles       from \"./components/Titles\";\nimport Form         from \"./components/Form\";\nimport Weather      from \"./components/Weather\";\n\n\n\n\nconst API_KEY = \"938c0b043e3bf588186831606cc2990f\";\n\nclass App extends React.Component {\n\n    async componentDidMount() {\n\n        try {\n\n            var res = await fetch('/isLoggedIn', {\n                method: 'post',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                }\n            });\n\n            var result = await res.json();\n\n            if (result && result.success) {\n              UserStore.loading = false;\n              UserStore.isLoggedIn = true;\n              UserStore.username = result.username;\n            }\n\n            else {\n              UserStore.loading = false;\n              UserStore.isLoggedIn = false;\n\n            }\n\n        }\n\n        catch(e) {\n          UserStore.loading = false;\n          UserStore.isLoggedIn = false; \n        }\n    }\n\n    async doLogout() {\n\n      try {\n\n          var res = await fetch('/logout', {\n              method: 'post',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n          });\n\n          var result = await res.json();\n\n          if (result && result.success) {\n            UserStore.isLoggedIn = false;\n            UserStore.username = '';\n          }\n\n      }\n\n      catch(e) {\n        console.log(e)\n      }\n  }\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values.\"\n      });\n    }\n  }\n  render() {\n\n      if (UserStore.loading) {\n        return(\n          <div className=\"app\">\n              <div className='container'>\n                  Loading, please wait..\n              </div>\n          </div>\n        );\n      }\n\n      else {\n\n        if (UserStore.isLoggedIn) {\n          return(\n            <div className=\"app\">\n                <div className='container'>\n                    Welcome {UserStore.username}\n\n                    <SubmitButton\n                      text={'Log out'}\n                      disabled={false}\n                      onClick={ () => this.doLogout() }\n                    />\n                </div>\n            </div>\n          );\n        }\n\n      }\n\n\n    return (\n      <div>\n        <LoginForm />\n\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"col-xs-5 title-container\">\n                  <Titles />\n            </div>\n              <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n              </div>\n            </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default observer(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}